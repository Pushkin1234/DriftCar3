using UnityEngine;
using UnityEngine.SceneManagement;

/// <summary>
/// –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π –∏–≥—Ä—ã –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–ª–∞–≤–∏—à–∏ R
/// –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–∞ –ª—é–±–æ–π GameObject –≤ —Å—Ü–µ–Ω–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ GameController)
/// </summary>
public class ResetSaveManager : MonoBehaviour
{
    [Header("Settings")]
    [SerializeField] private KeyCode _resetKey = KeyCode.R;
    [SerializeField] private bool _requireConfirmation = true;
    [SerializeField] private bool _reloadSceneAfterReset = true;
    
    [Header("Debug")]
    [SerializeField] private bool _showDebugMessages = true;
    
    private bool _waitingForConfirmation = false;
    private float _confirmationTimeout = 3f;
    private float _confirmationTimer = 0f;
    
    private void Update()
    {
        HandleResetInput();
    }
    
    private void HandleResetInput()
    {
        // –ü–µ—Ä–≤–æ–µ –Ω–∞–∂–∞—Ç–∏–µ R
        if (!_waitingForConfirmation && Input.GetKeyDown(_resetKey))
        {
            if (_requireConfirmation)
            {
                StartConfirmation();
            }
            else
            {
                PerformReset();
            }
        }
        // –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ R –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        else if (_waitingForConfirmation && Input.GetKeyDown(_resetKey))
        {
            PerformReset();
        }
        
        // –¢–∞–π–º–µ—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        if (_waitingForConfirmation)
        {
            _confirmationTimer -= Time.deltaTime;
            
            if (_confirmationTimer <= 0f)
            {
                CancelConfirmation();
            }
        }
    }
    
    private void StartConfirmation()
    {
        _waitingForConfirmation = true;
        _confirmationTimer = _confirmationTimeout;
        
        if (_showDebugMessages)
        {
            Debug.LogWarning($"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –ù–∞–∂–º–∏—Ç–µ R –µ—â–µ —Ä–∞–∑ –≤ —Ç–µ—á–µ–Ω–∏–µ {_confirmationTimeout} —Å–µ–∫—É–Ω–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ –í–°–ï–• —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π!");
        }
        
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å UI —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        ShowConfirmationUI();
    }
    
    private void CancelConfirmation()
    {
        _waitingForConfirmation = false;
        
        if (_showDebugMessages)
        {
            Debug.Log("–°–±—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω");
        }
        
        HideConfirmationUI();
    }
    
    private void PerformReset()
    {
        _waitingForConfirmation = false;
        
        if (_showDebugMessages)
        {
            Debug.LogWarning("üî• –°–ë–†–û–° –í–°–ï–• –°–û–•–†–ê–ù–ï–ù–ò–ô! üî•");
        }
        
        // –ü–æ–ª—É—á–∞–µ–º DataModule
        var dataModule = ModuleManager.Instance?.GetModule<DataModule>();
        
        if (dataModule != null)
        {
            // –í—ã–∑—ã–≤–∞–µ–º —Å–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö
            dataModule.ResetData();
            
            if (_showDebugMessages)
            {
                Debug.Log("‚úÖ –í—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!");
            }
            
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ü–µ–Ω—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if (_reloadSceneAfterReset)
            {
                ReloadCurrentScene();
            }
        }
        else
        {
            Debug.LogError("‚ùå DataModule –Ω–µ –Ω–∞–π–¥–µ–Ω! –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ ModuleManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.");
        }
        
        HideConfirmationUI();
    }
    
    private void ReloadCurrentScene()
    {
        string currentSceneName = SceneManager.GetActiveScene().name;
        
        if (_showDebugMessages)
        {
            Debug.Log($"üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ü–µ–Ω—ã: {currentSceneName}");
        }
        
        SceneManager.LoadScene(currentSceneName);
    }
    
    private void ShowConfirmationUI()
    {
        // TODO: –ü–æ–∫–∞–∑–∞—Ç—å UI —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        // –ù–∞–ø—Ä–∏–º–µ—Ä:
        // UIManager.ShowMessage("–ù–∞–∂–º–∏—Ç–µ R –µ—â–µ —Ä–∞–∑ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–±—Ä–æ—Å–∞");
    }
    
    private void HideConfirmationUI()
    {
        // TODO: –°–∫—Ä—ã—Ç—å UI —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        // –ù–∞–ø—Ä–∏–º–µ—Ä:
        // UIManager.HideMessage();
    }
    
    #if UNITY_EDITOR
    [ContextMenu("Test - Reset Save Data")]
    private void TestReset()
    {
        Debug.Log("–¢–µ—Å—Ç–æ–≤—ã–π —Å–±—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π –∏–∑ Editor...");
        _requireConfirmation = false;
        PerformReset();
    }
    
    [ContextMenu("Show Current Save Data")]
    private void ShowCurrentData()
    {
        var dataModule = ModuleManager.Instance?.GetModule<DataModule>();
        
        if (dataModule != null)
        {
            Debug.Log("=== –¢–µ–∫—É—â–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ===");
            Debug.Log($"–ú–æ–Ω–µ—Ç—ã: {dataModule.Data.coins}");
            Debug.Log($"–†–µ–∫–æ—Ä–¥ –¥—Ä–∏—Ñ—Ç–∞: {dataModule.Data.recordDriftScore}");
            Debug.Log($"–í—ã–±—Ä–∞–Ω–Ω–∞—è –º–∞—à–∏–Ω–∞: {dataModule.Data.appliedCarIndex}");
            Debug.Log($"–ö—É–ø–ª–µ–Ω–æ –º–∞—à–∏–Ω: {dataModule.Data.isBuyShop.FindAll(x => x).Count}/5");
            
            for (int i = 0; i < dataModule.Data.isBuyShop.Count; i++)
            {
                Debug.Log($"  –ú–∞—à–∏–Ω–∞ {i}: {(dataModule.Data.isBuyShop[i] ? "‚úÖ –ö—É–ø–ª–µ–Ω–∞" : "‚ùå –ù–µ –∫—É–ø–ª–µ–Ω–∞")}");
            }
        }
    }
    #endif
}

