using UnityEngine;
using UnityEngine.UI;
using TMPro;

public class CustomizationController : MonoBehaviour
{
    [Header("View Reference")]
    [SerializeField] private CustomizationView _view;
    
    [Header("Configuration")]
    [SerializeField] private string _targetCarModelName = "SportsCar"; // –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –º–∞—à–∏–Ω—ã
    [SerializeField] private Color[] _availableColors;
    
    private CustomizationModule _customizationModule;
    private DataModule _dataModule;
    private int _currentWheelIndex = 0;
    
    private void Start()
    {
        _customizationModule = ModuleManager.Instance.GetModule<CustomizationModule>();
        _dataModule = ModuleManager.Instance.GetModule<DataModule>();
        
        InitializeUI();
        LoadCurrentCustomization();
    }
    
    private void InitializeUI()
    {
        if (_view == null)
        {
            Debug.LogError("CustomizationView is not assigned!");
            return;
        }
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ü–≤–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ View
        for (int i = 0; i < _view.ColorButtons.Length && i < _availableColors.Length; i++)
        {
            int colorIndex = i; // –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –∑–∞–º—ã–∫–∞–Ω–∏—è
            Color targetColor = _availableColors[i];
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç –∫–Ω–æ–ø–∫–∏
            var buttonImage = _view.ColorButtons[i].GetComponent<Image>();
            if (buttonImage != null)
            {
                buttonImage.color = targetColor;
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
            _view.ColorButtons[i].onClick.AddListener(() => OnColorButtonClicked(targetColor));
        }
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∫–æ–ª–µ—Å —á–µ—Ä–µ–∑ View
        if (_view.PreviousWheelButton != null)
            _view.PreviousWheelButton.onClick.AddListener(OnPreviousWheelClicked);
            
        if (_view.NextWheelButton != null)
            _view.NextWheelButton.onClick.AddListener(OnNextWheelClicked);
            
        // –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ View
        if (_view.ResetButton != null)
            _view.ResetButton.onClick.AddListener(OnResetCustomizationClicked);
            
        // –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —á–µ—Ä–µ–∑ View
        if (_view.CloseButton != null)
            _view.CloseButton.onClick.AddListener(OnCloseClicked);
    }
    
    private void LoadCurrentCustomization()
    {
        if (_customizationModule == null) return;
        
        var customization = _customizationModule.GetCarCustomization(_targetCarModelName);
        _currentWheelIndex = customization.selectedWheelIndex;
        
        UpdateWheelUI();
    }
    
    private void OnColorButtonClicked(Color selectedColor)
    {
        if (_customizationModule == null) return;
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç –∫ –º–∞—à–∏–Ω–µ
        _customizationModule.PaintCar(_targetCarModelName, selectedColor);
        
        Debug.Log($"Car {_targetCarModelName} painted with color: {selectedColor}");
    }
    
    private void OnPreviousWheelClicked()
    {
        if (_customizationModule == null) return;
        
        _currentWheelIndex--;
        if (_currentWheelIndex < 0)
            _currentWheelIndex = _customizationModule.GetWheelCount() - 1;
            
        ApplyWheelChange();
    }
    
    private void OnNextWheelClicked()
    {
        if (_customizationModule == null) return;
        
        _currentWheelIndex++;
        if (_currentWheelIndex >= _customizationModule.GetWheelCount())
            _currentWheelIndex = 0;
            
        ApplyWheelChange();
    }
    
    private void ApplyWheelChange()
    {
        if (_customizationModule == null) return;
        
        _customizationModule.ChangeWheels(_targetCarModelName, _currentWheelIndex);
        UpdateWheelUI();
        
        Debug.Log($"Car {_targetCarModelName} wheels changed to index: {_currentWheelIndex}");
    }
    
    private void UpdateWheelUI()
    {
        if (_customizationModule == null || _view == null) return;
        
        var wheelData = _customizationModule.GetWheelData(_currentWheelIndex);
        if (wheelData != null)
        {
            string wheelName = wheelData.wheelName;
            bool isUnlocked = wheelData.isUnlocked;
            int totalWheels = _customizationModule.GetWheelCount();
            
            string status = isUnlocked ? "‚úì" : $"üîí {wheelData.price}üí∞";
            string displayText = $"{wheelName} ({_currentWheelIndex + 1}/{totalWheels}) {status}";
            
            // –û–±–Ω–æ–≤–ª—è–µ–º UI —á–µ—Ä–µ–∑ View
            _view.UpdateWheelDisplay(displayText, wheelData.wheelIcon);
        }
    }
    
    private void OnResetCustomizationClicked()
    {
        if (_customizationModule == null) return;
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
        _customizationModule.PaintCar(_targetCarModelName, Color.white);
        _customizationModule.ChangeWheels(_targetCarModelName, 0);
        
        _currentWheelIndex = 0;
        UpdateWheelUI();
        
        Debug.Log($"Car {_targetCarModelName} customization reset to default");
    }
    
    private void OnCloseClicked()
    {
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏
        if (_view != null)
        {
            _view.SetVisible(false);
        }
        
        Debug.Log("Customization panel closed");
    }
    
    /// <summary>
    /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ü–µ–ª–µ–≤—É—é –º–æ–¥–µ–ª—å –º–∞—à–∏–Ω—ã –¥–ª—è –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏
    /// </summary>
    public void SetTargetCar(string carModelName)
    {
        _targetCarModelName = carModelName;
        LoadCurrentCustomization();
    }
    
    /// <summary>
    /// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏
    /// </summary>
    public void ShowCustomizationPanel()
    {
        if (_view != null)
        {
            _view.SetVisible(true);
            LoadCurrentCustomization();
        }
    }
    
    /// <summary>
    /// –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—é –∫ –∑–∞—Å–ø–∞–≤–Ω–µ–Ω–Ω–æ–π –º–∞—à–∏–Ω–µ
    /// </summary>
    public void ApplyCustomizationToSpawnedCar(GameObject carObject)
    {
        if (_customizationModule == null) return;
        
        _customizationModule.ApplyCustomizationToCar(carObject, _targetCarModelName);
    }
}
